'scopeName': 'source.axs'
'fileTypes': [
  'axs'
  'axi'
]
'firstLineMatch': '^PROGRAM_NAME.*|^MODULE_NAME.*'
'name': 'NetLinx Source'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'begin': '\\b(define_function\\*?)\\s*((\\*)|(\\*?[a-zA-Z_$]\\w*))?\\s*(\\()'
    'beginCaptures':
      '1':
        'name': 'storage.type.function.axs'
      '3':
        'name': 'storage.type.function.axs'
      '4':
        'name': 'entity.name.function.axs'
      '5':
        'name': 'punctuation.definition.parameters.begin.axs'
    'comment': 'match regular function like: define_function myFunc(arg) { â€¦ }'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.end.axs'
    'name': 'meta.function.axs'
    'patterns': [
      {
        'include': '#function-params'
      }
    ]
  }
  {
    'match': '\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?)((e|E)[+-]?[0-9]+)?)\\b'
    'name': 'constant.numeric.axs'
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.axs'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.axs'
    'name': 'string.quoted.single.axs'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.axs'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.axs'
    'name': 'string.quoted.double.axs'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'begin': '\\(\\*|/\\*\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.axs'
    'end': '\\*\\)|\\*/'
    'name': 'comment.block.documentation.axs'
  }
  {
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.axs'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.axs'
        'end': '\\n'
        'name': 'comment.line.double-slash.axs'
      }
    ]
  }
  {
    'match': '(?<!\\.)\\b(switch|case|break|default|if|else|for|if|return|medium_while|long_while|select|active)(?!\\s*:)\\b'
    'name': 'keyword.control.axs'
  }
  {
    'match': '(?<!\\.)\\b(integer|sinteger|long|slong|char|widechar|float|double|dev|devchan|devlev)(?!\\s*:)\\b'
    'name': 'storage.type.axs'
  }
  {
    'match': '(?<!\\.)\\b(constant|local_var|persistent|stack_var|volatile|non_volatile)(?!\\s*:)\\b'
    'name': 'storage.modifier.axs'
  }
  {
    'comment': 'common C constant naming idiom -- kConstantVariable'
    'match': '\\bk[A-Z]\\w*\\b'
    'name': 'constant.other.variable.mac-classic.axs'
  }
  {
    'match': '(?<!\\.)\\btrue(?!\\s*:)\\b'
    'name': 'constant.language.boolean.true.axs'
  }
  {
    'match': '(?<!\\.)\\bfalse(?!\\s*:)\\b'
    'name': 'constant.language.boolean.false.axs'
  }
  {
    'match': '\\*|\\-\\-|\\-|\\+\\+|\\+|==|=|<>|<=|>=|<<|LSHIFT|>>|RSHIFT|<|>|~|BNOT|!|NOT|&|BAND|&&|AND|\\||BOR|\\|\\||OR|\\+=|\\-=|\\^|BXOR|\\^\\^|XOR|%|MOD'
    'name': 'keyword.operator.axs'
  }
  {
    'match': '\\;'
    'name': 'punctuation.terminator.statement.axs'
  }
  {
    'match': ',[ |\\t]*'
    'name': 'meta.delimiter.object.comma.axs'
  }
  {
    'match': '\\.'
    'name': 'meta.delimiter.method.period.axs'
  }
  {
    'match': '\\{|\\}'
    'name': 'meta.brace.curly.axs'
  }
  {
    'match': '\\(|\\)'
    'name': 'meta.brace.round.axs'
  }
  {
    'match': '\\[|\\]'
    'name': 'meta.brace.square.axs'
  }
  {
    'include': '#block'
  }
]
'repository':
  'access':
    'captures':
      '1':
        'name': 'punctuation.separator.variable-access.axs'
      '2':
        'name': 'variable.other.dot-access.axs'
    'match': '(\\.)([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()'
  'block':
    'patterns': [
      {
        'begin': '\\{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.axs'
        'end': '\\}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.axs'
        'name': 'meta.block.axs'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'block_innards':
    'patterns': [
      {
        'include': '#preprocessor-rule-enabled-block'
      }
      {
        'include': '#preprocessor-rule-disabled-block'
      }
      {
        'include': '#preprocessor-rule-other-block'
      }
      {
        'include': '#sizeof'
      }
      {
        'include': '#access'
      }
      {
        'include': '#libc'
      }
      {
        'include': '#c_function_call'
      }
      {
        'captures':
          '1':
            'name': 'variable.other.axs'
          '2':
            'name': 'punctuation.definition.parameters.axs'
        'match': '(?x)\n\t\t\t        (?x)\n\t\t\t(?:  \n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()'
        'name': 'meta.initialization.axs'
      }
      {
        'include': '#block'
      }
      {
        'include': '$base'
      }
    ]
  'c_function_call':
    'captures':
      '1':
        'name': 'punctuation.whitespace.function-call.leading.axs'
      '2':
        'name': 'support.function.any-method.axs'
      '3':
        'name': 'punctuation.definition.parameters.axs'
    'match': '(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()'
    'name': 'meta.function-call.axs'
  'comments':
    'patterns': [
      {
        'begin': '/\\*|\\(\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.axs'
        'end': '\\*/|\\*\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.axs'
        'name': 'comment.block.axs'
      }
      {
        'begin': '(^[ \\s]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.axs'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.axs'
            'end': '\\n'
            'name': 'comment.line.double-slash.axs'
            'patterns': [
              {
                'match': '(?>\\\\\\s*\\n)'
                'name': 'punctuation.separator.continuation.axs'
              }
            ]
          }
        ]
      }
      {
        'match': '\\*/.*\\n|\\*\\).*\\n'
        'name': 'invalid.illegal.stray-comment-end.axs'
      }
    ]
  'disabled':
    'begin': '^\\s*#\\s*if(n?def)?\\b.*$'
    'comment': 'eat nested preprocessor if(def)s'
    'end': '^\\s*#\\s*endif\\b'
    'patterns': [
      {
        'include': '#disabled'
      }
      {
        'include': '#pragma-mark'
      }
    ]
  'libc':
    'captures':
      '1':
        'name': 'punctuation.whitespace.support.function.leading.axs'
      '2':
        'name': 'support.function.C99.axs'
    'match': '(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b'
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.axs'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.axs'
    'name': 'meta.parens.axs'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'pragma-mark':
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.pragma.axs'
      '3':
        'name': 'meta.toc-list.pragma-mark.axs'
    'match': '^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))'
    'name': 'meta.section'
  'preprocessor-rule-disabled':
    'begin': '^\\s*(#(if)\\s+(0)\\b).*'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.if.axs'
      '3':
        'name': 'constant.numeric.preprocessor.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b)'
        'captures':
          '1':
            'name': 'meta.preprocessor.axs'
          '2':
            'name': 'keyword.control.import.else.axs'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'name': 'comment.block.preprocessor.if-branch'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-disabled-block':
    'begin': '^\\s*(#(if)\\s+(0)\\b).*'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.if.axs'
      '3':
        'name': 'constant.numeric.preprocessor.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b)'
        'captures':
          '1':
            'name': 'meta.preprocessor.axs'
          '2':
            'name': 'keyword.control.import.else.axs'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'name': 'comment.block.preprocessor.if-branch.in-block'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled':
    'begin': '^\\s*(#(if)\\s+(0*1)\\b)'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.if.axs'
      '3':
        'name': 'constant.numeric.preprocessor.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b).*'
        'captures':
          '1':
            'name': 'meta.preprocessor.axs'
          '2':
            'name': 'keyword.control.import.else.axs'
        'contentName': 'comment.block.preprocessor.else-branch'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-block':
    'begin': '^\\s*(#(if)\\s+(0*1)\\b)'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.if.axs'
      '3':
        'name': 'constant.numeric.preprocessor.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'begin': '^\\s*(#\\s*(else)\\b).*'
        'captures':
          '1':
            'name': 'meta.preprocessor.axs'
          '2':
            'name': 'keyword.control.import.else.axs'
        'contentName': 'comment.block.preprocessor.else-branch.in-block'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
      {
        'begin': ''
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'preprocessor-rule-other':
    'begin': '^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-other-block':
    'begin': '^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))'
    'captures':
      '1':
        'name': 'meta.preprocessor.axs'
      '2':
        'name': 'keyword.control.import.axs'
    'end': '^\\s*(#\\s*(endif)\\b)'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
        'name': 'constant.character.escape.axs'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.axs'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +\']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t'
        'name': 'constant.other.placeholder.axs'
      }
      {
        'match': '%'
        'name': 'invalid.illegal.placeholder.axs'
      }
    ]
